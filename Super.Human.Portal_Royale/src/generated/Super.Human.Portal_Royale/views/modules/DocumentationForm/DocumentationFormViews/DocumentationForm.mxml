<j:VGroup  xmlns:j="library://ns.apache.org/royale/jewel" xmlns:fx="http://ns.adobe.com/mxml/2009"
			xmlns:js="library://ns.apache.org/royale/basic" xmlns:html="library://ns.apache.org/royale/html"
			xmlns:joditeditor="Super.Human.Portal_Royale.classes.joditeditor.*" xmlns:dataGrid="Super.Human.Portal_Royale.classes.dataGrid.*"
			xmlns:components="Super.Human.Portal_Royale.views.components.*"
			currentState="dataGridState" gap="5" stateChangeComplete="{this.dispatchEvent(new Event('valueChange'))}"
			itemsVerticalAlign="itemsTop" initComplete="onViewInitComplete(event)" percentHeight="100">
  <j:beads>
    <js:ContainerDataBinding/>
    <js:SimpleStatesImpl/>
  </j:beads>
  <j:states>
    <js:State name="dataGridState"/>
    <js:State name="contentState"/>
  </j:states>
  <fx:Script><![CDATA[
	import Super.Human.Portal_Royale.classes.events.ErrorEvent;
	import Super.Human.Portal_Royale.views.modules.DocumentationForm.DocumentationFormServices.DocumentationFormProxy;
	import Super.Human.Portal_Royale.views.modules.DocumentationForm.DocumentationFormVO.DocumentationFormVO;

	import org.apache.royale.jewel.Alert;

	[Bindable] private var proxy:DocumentationFormProxy = DocumentationFormProxy.getInstance();

	[Bindable] private var itemVO:DocumentationFormVO;
	[Bindable] private var isDisabled:Boolean = false;

    public static const NAME:String = "DocumentationForm";

    private function onViewInitComplete(event:Event):void
    {
        proxy.addEventListener(ErrorEvent.SERVER_ERROR, onServerError);
        proxy.addEventListener(DocumentationFormProxy.EVENT_ITEM_UPDATED, onServerItemChanged);
        proxy.addEventListener(DocumentationFormProxy.EVENT_ITEM_REMOVED, onServerItemChanged);
    }
    
    public function refreshItems():void
    {
    		this.proxy.requestItems();
    }
    
    public function cancelFormEdit():void
    {
        this.currentState = 'dataGridState';
        this.proxy.selectedIndex = -1;
        
        if (this.itemVO)
        {
        		this.itemVO.DocumentationName = null;
        		this.itemVO.DocumentationUNID = null;
    		}
    		
        this.itemVO = null;
    }

	private function onSaveClick(event:Event):void
    {
        this.proxy.submitItem(this.itemVO);
    }

    private function onCancelClick(event:Event):void
    {
        this.cancelFormEdit();
    }

    private function onAddItem(event:Event):void
    {
        this.proxy.selectedIndex = -1;
        this.currentState = 'contentState';
        this.isDisabled = false;
        this.itemVO = new DocumentationFormVO();
    }

    private function onEditItem(event:Event):void
    {
        this.currentState = 'contentState';
        this.isDisabled = false;
        this.proxy.selectedIndex = dg.selectedIndex;
        this.itemVO = dg.selectedItem.clone();
    }

    private function onGridDoubleClick(event:Event):void
    {
        this.currentState = 'contentState';
        this.isDisabled = true;
        this.proxy.selectedIndex = dg.selectedIndex;
        this.itemVO = dg.selectedItem.clone();
    }

    private function onServerItemChanged(event:Event):void
    {
        this.currentState = 'dataGridState';
        this.dg.refreshCurrentDataProvider();
    }

    private function onServerError(event:ErrorEvent):void
    {
        var errorMessage:String = event.errorMessage;
        if (event.errors && (event.errors is Array))
        {
            errorMessage += "\n";
            for (var i:int=0; i < event.errors.length; i++)
            {
                errorMessage += "\n"+ event.errors[i].message;
            }
        }

        Alert.show(errorMessage,  'Error!', Alert.OK);
    }

	private function removeItem():void
	{
		var alert:Alert = Alert.show('Are you sure you want to remove this item?',  'Remove', Alert.OK | Alert.CANCEL);
			alert.addEventListener('close', function closeAlert(e:Event):void { if (e['detail'] == Alert.OK)
    									{
    										proxy.removeItem(dg.selectedItem as DocumentationFormVO);
    									}});
	}

]]></fx:Script>
  <j:HGroup percentWidth="100" itemsHorizontalAlign="itemsLeft" gap="2" excludeFrom="contentState">
      <j:style>
          <js:SimpleCSSStyles padding="10"/>
      </j:style>
      <j:IconButton text="Add" 
                    click="onAddItem(event)" visible="{this.proxy.editable}">
        <j:icon>
            <js:MaterialIcon text="{MaterialIconType.ADD}" />
        </j:icon>
      </j:IconButton>
      <j:IconButton text="Edit"
                    click="onEditItem(event)" visible="{this.proxy.editable}">
          <j:icon>
              <js:MaterialIcon text="{MaterialIconType.MODE_EDIT}" />
          </j:icon>
           <j:beads>
                <j:Disabled disabled="{dg.selectedIndex == -1}"/>
          </j:beads>
      </j:IconButton>
       <j:IconButton text="Remove" click="{removeItem()}" visible="{this.proxy.editable}">
          <j:icon>
              <js:MaterialIcon text="{MaterialIconType.REMOVE}" />
          </j:icon>
          <j:beads>
            <j:Disabled disabled="{dg.selectedIndex == -1}"/>
          </j:beads>
        </j:IconButton>
      <j:IconButton text="Refresh" 
                    click="{refreshItems()}">
        <j:icon>
            <js:MaterialIcon text="{MaterialIconType.REFRESH}" />
        </j:icon>
      </j:IconButton>
  </j:HGroup>
  <j:HGroup percentWidth="100" itemsHorizontalAlign="itemsLeft" gap="2" includeIn="contentState">
       <j:style>
           <js:SimpleCSSStyles paddingLeft="10" paddingTop="10" marginTop="0"/>
      </j:style>
      <j:Button text="Save" click="onSaveClick(event)" visible="{this.proxy.editable}">
           <j:beads>
              <j:Disabled disabled="{isDisabled}"/>
           </j:beads>
      </j:Button>
      <j:Button text="{this.proxy.editable == true ? 'Cancel' : 'Back'}" click="onCancelClick(event)"/>
      <j:Button text="Edit" click="onEditItem(event)" visible="{this.proxy.editable}">
      	   <j:beads>
      		   <j:Disabled disabled="{isDisabled == false}"/>
      	   </j:beads>
      </j:Button>
  </j:HGroup>
  
<j:VGroup includeIn="contentState" percentWidth="100" percentHeight="100" xmlns:j="library://ns.apache.org/royale/jewel"
		  gap="6">
  
  <j:beads>
    
    <j:ScrollingViewport/>
    
  </j:beads>
  
  <j:HGroup gap="2" itemsVerticalAlign="itemsCenter">
    
    <components:DominoTextInputMultiline text="{itemVO.DocumentationName}" change="{itemVO.DocumentationName = event.currentTarget.text;}" 
    										isDisabled="{isDisabled}" xmlns:components="Super.Human.Portal_Royale.views.components.*"
    										isTextArea="true" fontSize="x-large"/>
    
    <j:Label text="(" className="cursor-pointer" visible="{isDisabled &amp;&amp; this.proxy.showUnid}"/>
    
    <components:DominoTextInputMultiline text="{itemVO.DocumentationUNID}" change="{itemVO.DocumentationUNID = event.currentTarget.text;}" 
    										isDisabled="{isDisabled}" xmlns:components="Super.Human.Portal_Royale.views.components.*"
    										isTextArea="false" visible="{this.proxy.showUnid}"/>
    
    <j:Label text="{isDisabled ? ')' : '(DocumentationUNID)'}" className="cursor-pointer" visible="{this.proxy.showUnid}"/>
    
  </j:HGroup>

  <j:HGroup percentWidth="100">
    
    <joditeditor:RichTextEditor data="{itemVO.DocumentationBody}" textChange="{itemVO.DocumentationBody = event.target.data;}" readonly="{isDisabled}" 
    							   buttons="bold,italic,underline,strikethrough,font,fontsize,paragraph,file,cut,copy,paste,hr,table,link,undo,redo,print"
    							   options="{{allowResizeY: !isDisabled, showCharsCounter: false, showWordsCounter: false, showXPathInStatusbar: false, inline: isDisabled, defaultLineHeight: isDisabled ? 1 : null, minHeight: 40}}" className="" xmlns:joditeditor="Super.Human.Portal_Royale.classes.joditeditor.*">
    		<joditeditor:style>
    			<js:AllCSSStyles minWidth="300"/>
    		</joditeditor:style>
    	</joditeditor:RichTextEditor>
    
  </j:HGroup>
  
</j:VGroup>


  <dataGrid:DataGrid columns="{[{caption: 'DocumentationName', dataField: 'DocumentationName', allowSorting: false, allowFiltering: true, filterType: 'exclude'}, 
  							   {caption: 'DocumentationUNID', dataField: 'DocumentationUNID', dataType: 'number', alignment: 'left', sortOrder: 'asc', allowFiltering: false, visible: this.proxy.showUnid}]}" dataProvider="{this.proxy.items}" 
  					 filterRow="{ {visible: true, applyFilter: 'auto'} }" localId="dg" includeIn="dataGridState" className="dxDataGrid scrollHeightDocFormGridJS" percentWidth="100" doubleClick="onGridDoubleClick(event)"/>
</j:VGroup>