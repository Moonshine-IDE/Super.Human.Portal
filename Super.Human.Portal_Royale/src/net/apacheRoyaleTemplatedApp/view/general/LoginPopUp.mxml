<?xml version="1.0" encoding="utf-8"?>
<j:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:j="library://ns.apache.org/royale/jewel"
		 xmlns:js="library://ns.apache.org/royale/basic" xmlns:validators="classes.validators.*" xmlns:beads="classes.beads.*" xmlns:html="library://ns.apache.org/royale/html"
		 itemsVerticalAlign="itemsCenter" itemsHorizontalAlign="itemsCenter"
		 implements="interfaces.ILoginView" visible="false"
		 className="loginBackground" xmlns:controls="view.controls.*" currentState="loginInternal">
	<j:states>
		<js:State name="loginInternal"/>
		<js:State name="loginExternal"/>
	</j:states>
	<j:beads>
		<js:ContainerDataBinding />
	</j:beads>	
	<fx:Script>
		<![CDATA[
			import interfaces.busy.IBusyOperator;

			import org.apache.royale.core.IPopUpHost;
			import org.apache.royale.core.IUIBase;
			import org.apache.royale.events.IEventDispatcher;
			import org.apache.royale.jewel.Button;
			import org.apache.royale.utils.UIUtils;

			import view.general.BusyOperator;
			
			//--------------------------------------------------------------------------
			//
			//  PUBLIC API
			//
			//--------------------------------------------------------------------------
			
			public function get username():String
			{
				return this.txtUsername.text;
			}
			
			public function get loginBusyOperator():IBusyOperator
			{
				return new BusyOperator(btnLogin);
			}

			public function get loginButton():Object
			{
				return this.btnLogin;	
			}
			
			public function get refreshPageButton():Object
			{
				return this.btnRefresh;	
			}
			
			public function get password():String
			{
				return this.txtPassword.text;
			}
			
			public function get usernameText():IEventDispatcher
			{
				return this.txtUsername;
			}
			
			public function get passwordText():IEventDispatcher
			{
				return this.txtPassword;
			}
			
			public function get formValidator():Object
			{
				return this.validatorForm;
			}			
			
			public function get form():IEventDispatcher
			{
				return this.loginForm;
			}
			
			public function get forgotPassword():IEventDispatcher
			{
				return this.forgotPasswordLabel;	
			}

			public function get newRegistration():IEventDispatcher
			{
				return this.newRegistrationLabel;	
			}
			
			public function get isFormValid():Boolean
			{
				return !this.validatorForm.isError;	
			}			
			
			private var _loginFailed:Boolean;
			
			public function get loginFailed():Boolean
	        {
	            return _loginFailed;
	        }
	
			public function set loginFailed(value:Boolean):void
	        {
				if (_loginFailed != value)
				{
					_loginFailed = value;
	            		loginFormValidator.loginFailed = value;
					
					dispatchEvent("loginFailed");
				}
	        }
			
			public function set errorMessage(value:String):void
	        {
				loginFormValidator.requiredFieldError = value;
	        }
	
			public function resetView():void
			{
				txtUsername.text = txtPassword.text = "";
				
				resetValidation();
			}
			
			public function resetValidation():void
			{
				if (currentState != "loginInternal") return;
				
				var host:IPopUpHost = UIUtils.findPopUpHost(loginForm);
				(host as IUIBase).dispatchEvent(new Event("cleanValidationErrors"));
			}
		]]>
	</fx:Script>
	<j:Card className="loginViewBackground" itemsHorizontalAlign="itemsCenter" itemsVerticalAlign="itemsCenter">
		<j:Image src="resources/images/loginlogo.jpg"/>
		<j:Form localId="loginForm" percentWidth="100" includeIn="loginInternal">
			<j:beads>
				<j:FormValidator id="validatorForm" trigger="{btnLogin}" triggerEvent="click" />
				<validators:LoginFormValidator localId="loginFormValidator" trigger="{this}" triggerEvent="loginFailed"/>
			</j:beads>
			<controls:CustomFormItem required="true" className="horizontalContentItemsCenteredFormItem">
				<j:TextInput id="txtUsername" percentWidth="100">
					<j:beads>
						<j:EmailValidator required="1"/>
						<j:TextPrompt prompt="E-mail"/>
						<beads:AutoFocusBead autoFocus="true"/>
					</j:beads>
				</j:TextInput>
			</controls:CustomFormItem>
			<controls:CustomFormItem required="true" className="horizontalContentItemsCenteredFormItem">
				<j:TextInput id="txtPassword" percentWidth="100">
					<j:beads>
						<j:PasswordInput />
						<j:StringValidator required="6" requiredFieldError="Must be at least 6 characters."/>
						<j:TextPrompt prompt="Password"/>
					</j:beads>
				</j:TextInput>
			</controls:CustomFormItem>
		</j:Form>
		<j:Label multiline="true" text="You are not authenticated.\nClick the button below to login, and refresh the page when done." 
				includeIn="loginExternal" className="bigFont bold labelTextAlignCenter" maxWidth="500">
			<j:style>
				<js:SimpleCSSStyles paddingTop="10" paddingBottom="10" />
			</j:style>
		</j:Label>
		<j:HGroup gap="1" itemsHorizontalAlign="itemsCenter">
			<j:Button localId="btnRefresh" text="Refresh" className="lowercase" includeIn="loginExternal"
					  emphasis="primary" percentWidth="100"/>
			<j:Button localId="btnLogin" text="Login Now" className="lowercase noLinkWhiteButtonStyle"
					  percentWidth.loginInternal="80" percentWidth="100" emphasis="primary"/>
		</j:HGroup>
		<j:HGroup gap="1" itemsHorizontalAlign="itemsCenter" visible="false">
			<j:Label localId="forgotPasswordLabel" 
					 className="cursor-pointer loginPopupLinks"
					 text="Forgot Password?"/>
			<j:Label text="|" />
			<j:Label localId="newRegistrationLabel" text="New Registration" 
					 className="cursor-pointer loginPopupLinks"/>
		</j:HGroup>
	</j:Card>
</j:VGroup>