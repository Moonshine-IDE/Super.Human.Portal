<?xml version="1.0" encoding="utf-8"?>
<j:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:j="library://ns.apache.org/royale/jewel"
		 xmlns:js="library://ns.apache.org/royale/basic" xmlns:applications="view.applications.*"
		 itemsVerticalAlign="itemsCenter" gap="4" initComplete="onBookmarkInitComplete(event)"
		 currentState="browser">
	<j:states>
		<js:State name="browser"/>
		<js:State name="database"/>
	</j:states>
	<j:beads>
		<js:ContainerDataBinding />
	</j:beads>
	
	<fx:Metadata>
		[Event(name="editBookmark", type="view.bookmarks.event.BookmarkEvent")]
		[Event(name="deleteBookmark", type="view.bookmarks.event.BookmarkEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import model.vo.BookmarkVO;

			import org.apache.royale.events.MouseEvent;

			import view.bookmarks.event.BookmarkEvent;
						
			private var _bookmark:BookmarkVO;

			[Bindable]
			public function get bookmark():BookmarkVO
			{
				return _bookmark;
			}

			public function set bookmark(value:BookmarkVO):void
			{
				_bookmark = value;
			}

			private function onBookmarkInitComplete(event:Event):void
			{
				if (currentState == "browser")
				{
					this.browserHtmlLabel.html = '<a height="100%" width="100%" href="' + bookmark.url + '" target="_blank">' + bookmark.name + '</a>';
				}
				else if (currentState == "database")
				{
					var urlOpenDefault:String = bookmark.nomadURL ? '<a height="100%" width="100%" href="' + bookmark.nomadURL + '" target="_blank">' + bookmark.name + '</a>' : bookmark.name;
					if (bookmark.defaultAction != "nomad")
					{
						urlOpenDefault = bookmark.url ? '<a height="100%" width="100%" href="' + bookmark.url + '" target="_blank">' + bookmark.name + '</a>' : bookmark.name;
					}
					this.defaultOpenUrl.html = urlOpenDefault;
					this.configurationDetails.clientOpenLink = bookmark.url ? '<a height="100%" width="100%" href="' + bookmark.url + '" target="_blank">Open in Client</a>' : null;
					this.configurationDetails.nomadOpenLink = bookmark.nomadURL ? '<a height="100%" width="100%" href="' + bookmark.nomadURL + '" target="_blank">Open in Nomad</a>' : null;
				}
			}
			
			private function onShowHideDbConfigClick(event:MouseEvent):void
			{
				var iconButton:MaterialIcon = event.currentTarget as MaterialIcon;
				var showHideConfig:Boolean = false;
				
				if (iconButton.text == MaterialIconType.ARROW_DROP_DOWN)
				{
					iconButton.text = MaterialIconType.ARROW_DROP_UP;
					showHideConfig = true;
				}
				else
				{
					iconButton.text = MaterialIconType.ARROW_DROP_DOWN;
				}
				
				configurationDetails.visible = showHideConfig;
			}

			private function onEditBookmark(event:Event):void
			{
				this.dispatchEvent(new BookmarkEvent(BookmarkEvent.EDIT_BOOKMARK, this.bookmark));
			}
			
			private function onDeleteBookmark(event:Event):void
			{
				this.dispatchEvent(new BookmarkEvent(BookmarkEvent.DELETE_BOOKMARK, this.bookmark));
			}
		]]>
	</fx:Script>
	<j:HGroup includeIn="browser" itemsVerticalAlign="itemsCenter" percentWidth="100" gap="2">
		<j:HGroup minHeight="40" width="220" className="bookmarkTitleContainer"
				itemsVerticalAlign="itemsCenter">
			<j:Label localId="browserHtmlLabel" className="cursorPointer noLinkWhiteLabelStyle"
					multiline="true" percentWidth="100"/>
		</j:HGroup>
		<j:Label text="{bookmark.description}" multiline="true" className="bigFont" visible="{bookmark.description != null}"/>
	</j:HGroup>
	<j:VGroup includeIn="database" itemsVerticalAlign="itemsCenter" itemsHorizontalAlign="itemsLeft" gap="2">
		<j:HGroup percentWidth="100" itemsVerticalAlign="itemsCenter" gap="2">
			<j:HGroup gap="1" itemsVerticalAlign="itemsCenter" className="bookmarkTitleContainer"
					minHeight="40" width="220">
				<j:Label localId="defaultOpenUrl" multiline="true" percentWidth="85" className="cursorPointer noLinkWhiteLabelStyle"/>
				<js:MaterialIcon text="{MaterialIconType.ARROW_DROP_DOWN}" click="onShowHideDbConfigClick(event)" className="materialDropDownArrow"/>
			</j:HGroup>
			<j:Label text="{bookmark.description}" multiline="true" className="bigFont" visible="{bookmark.description != null}"/>
		</j:HGroup>
		<applications:ConfigurationAppDetails localId="configurationDetails" description="{bookmark.description}" server="{bookmark.server}"
											 database="{bookmark.database}" viewName="{bookmark.view}" nomadOpenLink="{bookmark.nomadURL}"
											 percentWidth="100" visible="false" 
											 editButtonClick="onEditBookmark(event)" deleteButtonClick="onDeleteBookmark(event)"/>
	</j:VGroup>
</j:HGroup>