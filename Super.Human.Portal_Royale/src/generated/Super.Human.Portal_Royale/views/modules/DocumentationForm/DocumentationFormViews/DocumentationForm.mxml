<j:VGroup  xmlns:j="library://ns.apache.org/royale/jewel" xmlns:fx="http://ns.adobe.com/mxml/2009"
			xmlns:js="library://ns.apache.org/royale/basic" xmlns:html="library://ns.apache.org/royale/html"
			xmlns:dataGrid="Super.Human.Portal_Royale.classes.dataGrid.*"
			xmlns:components="Super.Human.Portal_Royale.views.components.*" xmlns:htmlEditor="Super.Human.Portal_Royale.classes.htmlEditor.*" 
			xmlns:tileView="classes.com.devexpress.js.tileView.*" xmlns:breadcrump="classes.breadcrump.*"
			currentState="startview" gap="5" stateChangeComplete="onDocumentationFormStateChange(event)"
			itemsVerticalAlign="itemsTop" initComplete="onViewInitComplete(event)" percentHeight="100" className="bodyPadding">
  <j:beads>
    <js:ContainerDataBinding/>
  </j:beads>
  <j:states>
  	<js:State name="startview" />
    <js:State name="dataGridState"/>
    <js:State name="contentState"/>
  </j:states>
  <fx:Script><![CDATA[
	import Super.Human.Portal_Royale.classes.events.ErrorEvent;
	import Super.Human.Portal_Royale.classes.htmlEditor.events.HtmlEditorEvent;
	import Super.Human.Portal_Royale.classes.htmlEditor.helpers.ToolbarItems;
	import Super.Human.Portal_Royale.views.modules.DocumentationForm.DocumentationFormServices.DocumentationFormProxy;
	import Super.Human.Portal_Royale.views.modules.DocumentationForm.DocumentationFormVO.DocumentationFormVO;

	import classes.com.devexpress.js.tileView.events.TileViewEvent;

	import org.apache.royale.jewel.Alert;

	[Bindable] private var proxy:DocumentationFormProxy;

	[Bindable] private var itemVO:DocumentationFormVO;
	[Bindable] private var isDisabled:Boolean = false;

    public static const NAME:String = "DocumentationForm";

    private function onViewInitComplete(event:Event):void
    {
    	    proxy = DocumentationFormProxy.getInstance();
        proxy.addEventListener(ErrorEvent.SERVER_ERROR, onServerError);
        proxy.addEventListener(DocumentationFormProxy.EVENT_ITEM_UPDATED, onServerItemChanged);
        proxy.addEventListener(DocumentationFormProxy.EVENT_ITEM_REMOVED, onServerItemChanged);
        
        breadcrump.model = proxy.breadcrumpItems;
        breadcrump.buildBreadcrump(proxy.breadcrumpItems.gettingStarted);
    }
    
    private function onDocumentationFormStateChange(event:Event):void
    {
    		this.dispatchEvent(new Event('valueChange'));	
    }
    
    public function resetDocumentationForm():void
    {
    		this.currentState = 'startview';
    		this.proxy.selectedIndex = -1;
    		
    		if (this.dg)
    		{
    			this.dg.selectedIndex = -1;
    			this.dg.selectedItem = null;
   		} 
   		
        if (this.itemVO)
        {
        		this.itemVO.DocumentationName = null;
        		this.itemVO.DocumentationUNID = null;
    		}

        this.itemVO = null;
        
        breadcrump.buildBreadcrump(proxy.breadcrumpItems.gettingStarted);
    }
    
    public function refreshItems():void
    {
    		this.proxy.requestItems();
    }
    
    public function cancelFormEdit():void
    {
        this.currentState = 'dataGridState';
        this.proxy.selectedIndex = -1;
        
        if (this.itemVO)
        {
        		this.itemVO.DocumentationName = null;
        		this.itemVO.DocumentationUNID = null;
    		}

        this.itemVO = null;
    }

    public function initReadOnlyForm():void
    {
    		this.currentState = 'contentState';
        this.isDisabled = true;
        this.backCancelButton.text = "Back";
        this.proxy.selectedIndex = dg.selectedIndex;
        this.itemVO = dg.selectedItem.clone();
    }
    
	private function onSaveClick(event:Event):void
    {
        this.proxy.submitItem(this.itemVO);
        
        this.currentState = 'dataGridState';
    }

    private function onCancelClick(event:Event):void
    {
    		if (this.isDisabled)
    		{
        		this.cancelFormEdit();
    		}
    		else
    		{
    			this.initReadOnlyForm();
    		}
    }

    private function onBackClick(event:Event):void
    {
    		this.resetDocumentationForm();
    }
    
    private function onAddItem(event:Event):void
    {
        this.proxy.selectedIndex = -1;
        this.currentState = 'contentState';
        this.isDisabled = false;
        this.itemVO = new DocumentationFormVO();
        this.itemVO.Categories.push(tileGettingStarted.selectedItem.id);
    }

    private function onEditItem(event:Event):void
    {
        this.currentState = 'contentState';
        this.isDisabled = false;
        this.backCancelButton.text = "Cancel";
        this.proxy.selectedIndex = dg.selectedIndex;
        this.itemVO = dg.selectedItem.clone();
    }

    private function onServerItemChanged(event:Event):void
    {
        if (this.dg)
        {
        		var items:Array = this.proxy.itemsByCategory[tileGettingStarted.selectedItem.id];
        		if (items == this.dg.dataProvider)
        		{
        			this.dg.refreshDataProvider();
    			}
    			else
    			{
        			this.dg.dataProvider = items;
    			}
    		}
        
        breadcrump.model = proxy.breadcrumpItems;
        if (tileGettingStarted.selectedItem)
        {
        		breadcrump.buildBreadcrump(breadcrump.model[tileGettingStarted.selectedItem.id]);
    		}
      //  this.dg.refreshCurrentDataProvider();
    }

    private function onServerError(event:ErrorEvent):void
    {
        var errorMessage:String = event.errorMessage;
        if (event.errors && (event.errors is Array))
        {
            errorMessage += "\n";
            for (var i:int=0; i < event.errors.length; i++)
            {
                errorMessage += "\n"+ event.errors[i].message;
            }
        }

        Alert.show(errorMessage,  'Error!', Alert.OK);
    }

    private function onDocClickItem(event:TileViewEvent):void
    {
    		breadcrump.buildBreadcrump(breadcrump.model[event.item.DominoUniversalID]);
    		
    		initReadOnlyForm();	
    }
    
	private function removeItem():void
	{
		var alert:Alert = Alert.show('Are you sure you want to remove this item?',  'Remove', Alert.OK | Alert.CANCEL);
			alert.addEventListener('close', function closeAlert(e:Event):void { if (e['detail'] == Alert.OK)
    									{
    										proxy.removeItem(dg.selectedItem as DocumentationFormVO);
    									}});
	}

	private function onHtmlEditorTextChange(event:HtmlEditorEvent):void
	{
		this.itemVO.DocumentationBody = event.text;
	}
	
]]></fx:Script>
  <breadcrump:Breadcrump localId="breadcrump"/>
  
  <j:HGroup percentWidth="100" itemsHorizontalAlign="itemsLeft" gap="2" includeIn="dataGridState">
      <j:style>
          <js:SimpleCSSStyles padding="10"/>
      </j:style>
      <j:IconButton text="Add" 
                    click="onAddItem(event)" visible="{this.proxy.editable}">
        <j:icon>
            <js:MaterialIcon text="{MaterialIconType.ADD}" />
        </j:icon>
      </j:IconButton>
      <j:IconButton text="Edit"
                    click="onEditItem(event)" visible="{this.proxy.editable}">
          <j:icon>
              <js:MaterialIcon text="{MaterialIconType.MODE_EDIT}" />
          </j:icon>
           <j:beads>
                <j:Disabled disabled="{dg.selectedIndex == -1}"/>
          </j:beads>
      </j:IconButton>
       <j:IconButton text="Remove" click="{removeItem()}" visible="{this.proxy.editable}">
          <j:icon>
              <js:MaterialIcon text="{MaterialIconType.REMOVE}" />
          </j:icon>
          <j:beads>
            <j:Disabled disabled="{dg.selectedIndex == -1}"/>
          </j:beads>
        </j:IconButton>
      <j:IconButton text="Refresh" 
                    click="{refreshItems()}">
        <j:icon>
            <js:MaterialIcon text="{MaterialIconType.REFRESH}" />
        </j:icon>
      </j:IconButton>
      <j:Button localId="backButton" text="Back" click="onBackClick(event)"/>
  </j:HGroup>
  <j:HGroup percentWidth="100" itemsHorizontalAlign="itemsLeft" gap="1" includeIn="contentState">
       <j:style>
           <js:SimpleCSSStyles paddingLeft="10" paddingTop="10" marginTop="0"/>
      </j:style>
      <j:Button text="Save" click="onSaveClick(event)" visible="{this.proxy.editable}">
           <j:beads>
              <j:Disabled disabled="{isDisabled}"/>
           </j:beads>
      </j:Button>
      <j:Button localId="backCancelButton" text="Back" click="onCancelClick(event)"/>
      <j:Button text="Edit" click="onEditItem(event)" visible="{this.proxy.editable}">
      	   <j:beads>
      		   <j:Disabled disabled="{isDisabled == false}"/>
      	   </j:beads>
      </j:Button>
  </j:HGroup>
	<j:VGroup includeIn="contentState" percentWidth="100" percentHeight="100" xmlns:j="library://ns.apache.org/royale/jewel"
			gap="6">
	
		<j:beads>
			<j:ScrollingViewport/>
		</j:beads>
		
		<j:HGroup gap="2" itemsVerticalAlign="itemsCenter">
			
			<components:DominoTextInputMultiline text="{itemVO.DocumentationName}" change="{itemVO.DocumentationName = event.currentTarget.text;}" 
													isDisabled="{isDisabled}" xmlns:components="Super.Human.Portal_Royale.views.components.*"
													isTextArea="true" fontSize="x-large"/>
			
			<j:Label text="(" className="cursor-pointer" visible="{isDisabled &amp;&amp; this.proxy.showUnid}"/>
			
			<components:DominoTextInputMultiline text="{itemVO.DocumentationUNID}" change="{itemVO.DocumentationUNID = event.currentTarget.text;}" 
													isDisabled="{isDisabled}" xmlns:components="Super.Human.Portal_Royale.views.components.*"
													isTextArea="false" visible="{this.proxy.showUnid}"/>
			
			<j:Label text="{isDisabled ? ')' : '(DocumentationUNID)'}" className="cursor-pointer" visible="{this.proxy.showUnid}"/>
			
		</j:HGroup>
		
		<j:HGroup percentWidth="100">
			<htmlEditor:HtmlEditor data="{itemVO.DocumentationBody}" readOnly="{isDisabled}" 
									toolbarItems="{isDisabled ? [] : ToolbarItems.ALL_ITEMS}"
									textChange="onHtmlEditorTextChange(event)" />
		</j:HGroup>
	
	</j:VGroup>


  <!--<dataGrid:DataGrid columns="{[{caption: 'DocumentationName', dataField: 'DocumentationName', allowSorting: false, allowFiltering: true, filterType: 'exclude'}, 
  							   {caption: 'DocumentationUNID', dataField: 'DocumentationUNID', dataType: 'number', alignment: 'left', sortOrder: 'asc', allowFiltering: false, visible: this.proxy.showUnid}]}" dataProvider="{this.proxy.items}" 
  					 filterRow="{ {visible: true, applyFilter: 'auto'} }" localId="dg" includeIn="dataGridState" className="dxDataGrid scrollHeightDocFormGridJS" percentWidth="100" doubleClick="onGridDoubleClick(event)"/>-->
   
  <tileView:TileView localId="dg" className="tileViewJS" 
  					percentWidth="100" baseItemWidth="245" baseItemHeight="300" itemMargin="5" direction="vertical" 
  					itemRenderer="Super.Human.Portal_Royale.views.renderers.DocumentationTileRenderer"
  					includeIn="dataGridState" clickItemTileView="onDocClickItem(event)" />
  <tileView:TileView localId="tileGettingStarted" className="tileViewJS" direction="vertical" includeIn="startview"
					  percentWidth="100" baseItemHeight="350" baseItemWidth="300" itemMargin="10" 
					  dataProvider="{proxy.mainItems}"
					  itemRenderer="Super.Human.Portal_Royale.views.renderers.CategoryTileRenderer"/>
</j:VGroup>