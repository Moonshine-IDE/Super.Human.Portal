<?xml version="1.0" encoding="utf-8"?>
<j:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:js="library://ns.apache.org/royale/basic"
		 xmlns:j="library://ns.apache.org/royale/jewel"
		 currentState="normal">
  <j:beads>
    <js:ContainerDataBinding/>
    <js:SimpleStatesImpl/>
  </j:beads>
  <j:states>
    <js:State name="normal"/>
    <js:State name="disabled"/>
  </j:states>
  <j:style>
   	<js:SimpleCSSStyles localId="textMultiLineStyle" fontFamily="{fontFamily}" fontSize="{fontSize}"/>
  </j:style>
  <fx:Metadata>
      [Event("change")]
    </fx:Metadata>
  <fx:Script>
	<![CDATA[
		
		private var _isTextArea:Boolean;

		public function set isTextArea(value:Boolean):void
		{
			if (_isTextArea != value)
			{
				_isTextArea = value;
				
				switchState();
			}
		}
		
		private var _text:String;
		
		[Bindable]
		public function get text():String
		{
			return _text;
		}

		public function set text(value:String):void
		{
			if (_text != value)
			{
				_text = value;
				
				switchState();
			}
		}
		
		private var _isDisabled:Boolean;
		
		public function get isDisabled():Boolean
		{
			return _isDisabled;
		}

		public function set isDisabled(value:Boolean):void
		{
			if (_isDisabled != value)
			{
				_isDisabled = value;
				
				switchState();
			}
		}

		private var _fontFamily:String;

        [Bindable]
        public function get fontFamily():String
        {
            return _fontFamily;
        }

        public function set fontFamily(value:String):void
        {
        		if (_fontFamily != value)
        		{
            		_fontFamily = value;
            		
            		textMultiLineStyle.fontFamily = value;
    			}
        }

        private var _fontSize:String = "14px";

        [Bindable]
        public function get fontSize():String
        {
            return _fontSize;
        }

        public function set fontSize(value:String):void
        {
        		if (_fontSize != value)
        		{
            		_fontSize = value;
            		
            		textMultiLineStyle.fontSize = value;
        		}
        }
        
		private function switchState():void
		{
			this.currentState = isDisabled ? "disabled" : "normal";
			this.refreshTextArea();
		}

		private function onTextChange(event:Event):void
        {
            this._text = event.currentTarget.text;
            dispatchEvent(new Event("change"));
        }
        
        private function refreshTextArea():void
        {
        		if (textInput)
			{
				textInput.visible = _isTextArea == false;
			}
			
			if (descriptionInput)
			{
				descriptionInput.visible = _isTextArea;
			}
        }
	]]>
</fx:Script>
  <j:TextInput localId="textInput" text="{text}" change="onTextChange(event)" className="shortInput" includeIn="normal"/>
  <j:TextArea localId="descriptionInput" text="{text}" includeIn="normal" change="onTextChange(event)" minWidth="500"/>
  <j:Label text="{text}" multiline="true" percentHeight="100" includeIn="disabled" />
</j:VGroup>