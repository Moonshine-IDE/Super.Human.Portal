<?xml version="1.0" encoding="utf-8"?>
<j:ResponsiveView xmlns:fx="http://ns.adobe.com/mxml/2009"
				  xmlns:j="library://ns.apache.org/royale/jewel"
				  xmlns:js="library://ns.apache.org/royale/basic"
				  xmlns:html="library://ns.apache.org/royale/html"
				  xmlns:view="view.*" xmlns:general="view.general.*"
				  xmlns:model="model.*" 
				  xmlns:routing="org.apache.royale.routing.*" xmlns:beads="classes.beads.*" 
				  xmlns:hello="view.hello.*" xmlns:applications="view.applications.*" 
				  xmlns:vo="model.vo.*" xmlns:bookmarks="view.bookmarks.*" xmlns:controls="view.controls.*"
				  implements="interfaces.IMainContentView"
				  initComplete="onInitComplete(event)">
	<j:beads>
		<js:ContainerDataBinding/>
	</j:beads>
   <j:model>
        <model:LeftMenuNavigationModel localId="leftMenuNavModel"/>
    </j:model>
	<fx:Script>
		<![CDATA[

			import interfaces.IBookmarksView;
			import interfaces.IEditBookmarkView;
			import interfaces.IGenesisAppsView;
			import interfaces.IGenesisDirsView;
			import interfaces.IGenesisEditDirView;
			import interfaces.IInstalledAppView;
			import interfaces.ILoginView;
			import interfaces.INewRegistration;
			import interfaces.IPasswordReset;

			import mediator.MediatorNewRegistration;
			import mediator.MediatorPasswordReset;
			import mediator.applications.MediatorGenesisApps;
			import mediator.applications.MediatorGenesisDirs;
			import mediator.applications.MediatorGenesisEditDir;
			import mediator.bookmarks.MediatorEditBookmark;

			import model.vo.ConstantsCoreVO;

			import org.apache.royale.events.IEventDispatcher;
			import org.apache.royale.jewel.Alert;

			import view.general.BusyOperator;
																																																																																																						
			private function onInitComplete(event:Event):void 
			{
			   drawer.close();
			   navigation.selectedIndex = 0;
	        }
			
	        public function set title(value:String):void
	        {
	        		this.mainTitle.text = value;
	        }
	        
			public function get selectedNavigation():Object
			{
				return this.navigation.selectedItem;
			}			
			
			public function set selectedNavigation(value:Object):void
			{
				this.navigation.selectedItem = value;
			}			
			
			public function get selectedContent():String
			{
				return mainContent.selectedContent;
			}
			
			public function set selectedContent(value:String):void
			{
				mainContent.selectedContent = value;
			}
	
			public function get login():ILoginView
			{
				return this.loginView;
			}
			
			public function get newRegistration():INewRegistration
			{
				return this.newRegistrationView;	
			}			

			public function loadBusyOperator():BusyOperator
			{
				return new BusyOperator(this, ConstantsCoreVO.BUSY_INDICATOR_SCALE_FACTOR);
			}
			
			public function get viewPasswordReset():IPasswordReset
			{
				return this.passwordReset;	
			}
			
			public function set logoutVisible(value:Boolean):void
			{
				this.topappbar.visible = value;
				this.topappbar.hasDrawer = value;
				this.mainContent.hasTopAppBar = value;
				
				if (value && !drawer.isOpen)
				{
					drawer.open();
				}
				else if (!value)
				{
					drawer.close();
				}
			}
			
			public function get logout():IEventDispatcher
			{
				return lblLoginLogout;
			}
			
			public function set loggedUsername(value:String):void
			{
				this.lblLoggedUser.text = "Hello, "+ value +"!";
			}
			
			public function get switchTheme():IEventDispatcher
			{
				return this.themeSwitch;
			}
			
			private var _authenticationId:String = "";
			
			[Bindable]
			public function get authenticationId():String
			{
				return _authenticationId;
			}
			
			public function set authenticationId(value:String):void
			{
				if (value) 
				{
					_authenticationId = "\n"+ value;
				}
				else
				{
					_authenticationId = "";
				}
			}
			
			private var _versionText:String;
			[Bindable]
			public function get versionText():String
			{
				return _versionText;
			}
			public function set versionText(value:String):void
			{
				_versionText = value;
			}
			
			private var _footerText:String;
			
			[Bindable]
			public function get footerText():String
			{
				return _footerText;
			}

			public function set footerText(value:String):void
			{
				_footerText = value;
			}
			
			public function get viewDrawerNavigation():IEventDispatcher
			{
				return this.navigation;
			}
			
			public function get viewDrawerContentNavigation():IEventDispatcher
			{
				return this.viewDrawerContent;
			}
			
			public function get viewButtonDrawer():IEventDispatcher
			{
				return this.btnDrawer;
			}
			
			public function get viewDrawer():Object
			{
				return this.drawer;
			}			
			
			public function get viewBookmarksNavigation():IEventDispatcher
			{
				return this.bookmarksNavigation;
			}
			
			public function get viewInstalledAppsNavigation():IEventDispatcher
			{
				return this.installedAppsNavigation;
			}
			/*
			Temporary hide Hello
			public function get viewHello():IViewHello 
			{
				return this.helloView;	
			}*/
			
			public function get viewDocumentationForm():Object
			{
				return this.DocumentationForm_ID;	
			}
			
			public function get viewGenesisApps():IGenesisAppsView 
			{
				return this.genesisAppsView;	
			}
			
			public function get viewGenesisDirs():IGenesisDirsView
			{
				return this.genesisDirsView;
			}
			
			public function get viewGenesisEditDir():IGenesisEditDirView
			{
				return this.genesisEditDirView;	
			}
			
			public function get installedAppsView():IInstalledAppView
			{
				return this.viewInstalledApp;	
			}
			
			public function get viewNomadHelper():Object
			{
				return nomadHelper;	
			}
			
			public function get installedAppsSection():Object
			{
				return this.sectionInstalledApps;	
			}
			
			public function get bookmarksView():IBookmarksView
			{
				return this.viewBookmarks;	
			}
			
			public function get bookmarksViewSection():Object
			{
				return this.viewBookmarksSection;	
			}
			
			public function get viewEditBookmark():IEditBookmarkView
			{
				return this.editBookmarkView;
			}
			
			public function get footer():Object
			{
				return this.appFooter;
			}			
			
			public function get isDrawerOpen():Boolean
			{
				return this.drawer.isOpen;
			}
			
			public function notifyObsoleteCurrentVersion():void
			{
				var tmpMessage:String = "You have accessed an old version of the MyAccount application. You probably arrived here from a bookmark. Please update your bookmark to the always-current version by changing it to:<br/><br/><a href='https://Prominic.NET/MyAccount' target='blank'>https://Prominic.NET/MyAccount</a>";
				var alert:Alert = Alert.show(tmpMessage, "Update Information");
				alert.height = 300;
			}
			
			public function toggleDrawerOpen(value:Boolean):void
			{
				if (value)
				{
					drawer.open();
				}
				else
				{
					drawer.close();
				}
			}
			
			public function set autoSizeDrawer(value:Boolean):void
			{
				drawerResponsive.auto = value;
			}

		]]>
	</fx:Script>

	<j:FooterBar id="appFooter" fixed="true">
		<j:BarRow>
			<j:BarSection>
				<j:Label text="{versionText}"/>
			</j:BarSection>
			<j:BarSection itemsHorizontalAlign="itemsCenter">
				<j:Label html="{footerText}" percentWidth="100">
					<j:beads>
						<j:TextAlign align="center"/>
					</j:beads>
				</j:Label>
			</j:BarSection>
			<j:BarSection itemsHorizontalAlign="itemsRight">
				<j:Label id="authIdLabel" className="smallFont" text="{authenticationId}"/>
			</j:BarSection>
		</j:BarRow>
	</j:FooterBar>
	<j:Drawer id="drawer">
		<j:beads>
			<j:ResponsiveDrawer localId="drawerResponsive" auto="false"/>
			<beads:HideDrawerOnMouseDownIfFixed/>
			<beads:CloseDrawerOnNavigationLinkClick />
		</j:beads>
		<j:DrawerHeader height="66">
			<j:Label text="Sections"/>
		</j:DrawerHeader>
		<j:DrawerContent localId="viewDrawerContent">	
			<controls:NavigationWithClickableSection id="navigation" labelField="name" change="{function onMainNavChange(event:Event):void {
                                                            var selectedContent:String = event.currentTarget.selectedItem.content;
                                                            var mainContentView:Object = this[selectedContent + '_ID'];
                                                            if (mainContentView)
                                                            {
                                                            	   mainContentView.cancelFormEdit();
                                                        	   }
                                                            this.mainContent.selectedContent = selectedContent;
                                                        }; onMainNavChange(event);}" 
                                                        sectionChange="{function onMainNavSectionChange(event:Event):void {
                                                            var selectedContent:String = event.currentTarget.selectedItem.content;
                                                            this.mainContent.selectedContent = selectedContent;
                                                        }; onMainNavSectionChange(event);}" className="navWithClickableSectionItemRenderer">
				<controls:beads>
					<js:ConstantBinding sourceID="leftMenuNavModel" sourcePropertyName="mainNavigation" destinationPropertyName="dataProvider"/>
					<j:NavigationActionNotifier/>
				</controls:beads>
				<!--<j:dataProvider xmlns:j="library://ns.apache.org/royale/jewel">
					<js:ArrayList>
							Temporary hide Hello
							<fx:Object name="Hello" content="MediatorViewHello" xmlns:fx="http://ns.adobe.com/mxml/2009" visible="true" enabled="true"/>

                          	START_GENERATED_MENU_Super.Human.Portal_Royale_DocumentationForm:  **DO NOT MODIFY ANYTHING BELOW THIS LINE MANUALLY**
						<vo:NavigationLinkVO name="Getting Started" content="DocumentationForm" xmlns:fx="http://ns.adobe.com/mxml/2009" visible="true" enabled="true"
									   notificationName="Native/NoteOpenViewHello"/>
						END_GENERATED_MENU_Super.Human.Portal_Royale_DocumentationForm:  **DO NOT MODIFY ANYTHING ABOVE THIS LINE MANUALLY
						GENERATED_MENU_CURSOR: New snippets will be inserted here
						<vo:NavigationLinkVO localId="genesisAppNavItem" name="Genesis App" content="MediatorGenesisApps" xmlns:fx="http://ns.adobe.com/mxml/2009" visible="true" enabled="true"
								   			 notificationName="Native/NoteOpenGenesisApplications" icon="mdi mdi-apps mdi-24px"/>
					</js:ArrayList>
				</j:dataProvider>-->
			</controls:NavigationWithClickableSection>
			<j:Navigation id="bookmarksNavigation" labelField="name" className="navIconLinkItemRenderer">
				<j:beads>
					<js:ConstantBinding sourceID="leftMenuNavModel" sourcePropertyName="customBookmarks" destinationPropertyName="dataProvider"/>
					<j:NavigationActionNotifier/>
					<js:DynamicRemoveAllByNullItemRendererForArrayListData />
				</j:beads>
			</j:Navigation>
			<j:Navigation id="installedAppsNavigation" labelField="name" className="navIconLinkItemRenderer">
				<j:beads>
					<js:ConstantBinding sourceID="leftMenuNavModel" sourcePropertyName="navigationLinks" destinationPropertyName="dataProvider"/>
					<j:NavigationActionNotifier/>
					<js:DynamicRemoveAllByNullItemRendererForArrayListData />
				</j:beads>
			</j:Navigation>
		</j:DrawerContent>
	</j:Drawer>
	<j:TopAppBar id="topappbar" hasDrawer="{drawer.isOpen}" visible="false">
        <j:BarRow>
			<j:BarSection itemsHorizontalAlign="itemsLeft">
				<j:IconButton id="btnDrawer">
					<j:icon>
						<js:MaterialIcon text="{MaterialIconType.VIEW_HEADLINE}"/>
					</j:icon>
				</j:IconButton>
				<html:H2 localId="mainTitle" text="Super.Human.Portal"/>
            </j:BarSection>
			<j:BarSection itemsHorizontalAlign="itemsRight" gap="2">
				<j:ToggleButton localId="themeSwitch">
					<j:icon>
						<js:MaterialToggleIcon text="light_mode" selectedText="dark_mode" />
					</j:icon>
					<j:beads>
						<j:ToolTip toolTip="Switch between Light and Dark theme."/>
					</j:beads>
				</j:ToggleButton>
				<j:IconButton>
                    <j:icon>
                        <js:MaterialIcon text="{MaterialIconType.ACCOUNT_BOX}"/>
                    </j:icon>
                </j:IconButton>
				<j:Label id="lblLoggedUser" className="smallFont">
					<j:style>
						<js:AllCSSStyles fontWeight="bold"/>
					</j:style>
				</j:Label>
				<j:Label id="lblLoginLogout" text="Logout" className="cursorPointer">
					<j:beads>
						<j:ToolTip toolTip="Logout user"/>
					</j:beads>
				</j:Label>
			</j:BarSection>
        </j:BarRow>
    </j:TopAppBar>
    <j:ApplicationMainContent id="mainContent" hasTopAppBar="false" hasFooterBar="true" selectedContent="MediatorLoginPopup">
		<j:ScrollableSectionContent name="MediatorLoginPopup">
			<general:LoginPopUp id="loginView"/>
		</j:ScrollableSectionContent>
		<j:SectionContent name="{MediatorNewRegistration.NAME}">
			<j:VGroup className="loginBackground" itemsHorizontalAlign="itemsCenter">
				<j:beads>
					<js:ScrollingViewport/>
				</j:beads>
				<general:NewRegistration localId="newRegistrationView"/>
			</j:VGroup>
		</j:SectionContent>
		<j:SectionContent name="{MediatorPasswordReset.NAME}">
			<j:VGroup className="loginBackground" itemsHorizontalAlign="itemsCenter">
				<j:beads>
					<js:ScrollingViewport/>
				</j:beads>
				<general:PasswordReset id="passwordReset"/>
			</j:VGroup>
		</j:SectionContent>
		<j:SectionContent name="{MediatorGenesisApps.NAME}">
			<applications:GenesisAppsList id="genesisAppsView"/>
		</j:SectionContent>
		<j:SectionContent name="{MediatorGenesisDirs.NAME}">
			<applications:GenesisDirsView id="genesisDirsView"/>
		</j:SectionContent>
		<j:SectionContent name="{MediatorGenesisEditDir.NAME}">
			<applications:GenesisEditDirView id="genesisEditDirView"/>
		</j:SectionContent>
	<!--	
		Temporary hide Hello
		<j:ScrollableSectionContent name="{MediatorViewHello.NAME}">
			<hello:ViewHello id="helloView"/>
		</j:ScrollableSectionContent>-->

		<!--START_GENERATED_SCROLLABLE_SECTION_Super.Human.Portal_Royale_DocumentationForm:  **DO NOT MODIFY ANYTHING BELOW THIS LINE MANUALLY**-->
		<j:SectionContent name="{Super.Human.Portal_Royale.views.modules.DocumentationForm.DocumentationFormViews.DocumentationForm.NAME}" className="sectionCenter">
			<DocumentationForm:DocumentationForm localId="DocumentationForm_ID" xmlns:DocumentationForm="Super.Human.Portal_Royale.views.modules.DocumentationForm.DocumentationFormViews.*" />
		</j:SectionContent>
		<!--END_GENERATED_SCROLLABLE_SECTION_Super.Human.Portal_Royale_DocumentationForm:  **DO NOT MODIFY ANYTHING ABOVE THIS LINE MANUALLY**-->
		<!--GENERATED_VIEWS_CURSOR:  New  snippets will be inserted here-->
		<j:ScrollableSectionContent localId="sectionInstalledApps">
			<applications:InstalledAppView id="viewInstalledApp"/>
		</j:ScrollableSectionContent>
		<j:SectionContent localId="viewBookmarksSection">
			<bookmarks:BookmarksView id="viewBookmarks"/>
		</j:SectionContent>
		<j:ScrollableSectionContent name="{MediatorEditBookmark.NAME}">
			<bookmarks:EditBookmarkView localId="editBookmarkView"/>
		</j:ScrollableSectionContent>
    </j:ApplicationMainContent>
	<j:Group id="nomadHelper" visible="false"/>
</j:ResponsiveView>