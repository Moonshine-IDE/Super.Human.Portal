<?xml version="1.0" encoding="utf-8"?>
<j:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:j="library://ns.apache.org/royale/jewel" 
		  xmlns:js="library://ns.apache.org/royale/basic" 
		  xmlns:html="library://ns.apache.org/royale/html" xmlns:model="classes.topMenu.model.*" xmlns:helpers="classes.topMenu.helpers.*"
		  initComplete="onTopMenuInitComplete(event)">
	<j:beads>
		<js:ContainerDataBinding />
	</j:beads>
	<j:model>
		<model:TopMenuModel localId="menuModel"/>
	</j:model>
	<fx:Metadata>
		[Event(name="menuLoaded", type="classes.topMenu.events.TopMenuEvent")]
		[Event(name="menuItemChange", type="classes.topMenu.events.TopMenuEvent")]
	</fx:Metadata>
	<fx:Script>
	<![CDATA[
		import classes.topMenu.classes.ChangeSourceConst;
		import classes.topMenu.events.TopMenuEvent;
		import classes.topMenu.helpers.TopMenuUtils;
		import classes.topMenu.model.TopMenuVO;

		import org.apache.royale.collections.ArrayList;
		import org.apache.royale.icons.MaterialIcon;
		import org.apache.royale.net.HTTPConstants;
		import org.apache.royale.net.HTTPService;
		import org.apache.royale.net.beads.CORSCredentialsBead;
		import org.apache.royale.net.events.FaultEvent;
		import org.apache.royale.events.KeyboardEvent;

		[Bindable]
		private var nextDisabled:Boolean = true;
		[Bindable]
		private var previousDisabled:Boolean = true;
		
		private var _selectedItem:Object;

		public function get selectedItem():Object
		{
			if (!this.rootMenu) return null;
			
			return this.rootMenu.selectedItem;
		}
		
		public function get subSelectedItem():Object
		{
			if (!this.subMenu) return null;
			
			return this.subMenu.selectedItem;
		}

		private var _showMarks:Boolean = false;
		
		public function set showMarks(value:Boolean):void
		{
			if (_showMarks != value)
			{
				_showMarks = value;
				
				TopMenuUtils.recalculateMarkedMenu(value, model, model["menu"]);
			}	
		}
		
		private var _folderMenuStyle:Boolean = false;
		
		public function set folderMenuStyle(value:Boolean):void
		{
			if (_folderMenuStyle != value)
			{
				_folderMenuStyle = value;
			}	
		}

		public function navigateToItem(item:Object):void
		{
			if (item.parent == null)
			{
				this.initializeMenuModel(null, null);
			}
			else if (this.rootMenu.selectedItem && this.rootMenu.selectedItem.parent == item.parent)
			{
				if (item.parent != null)
				{
					this.rootMenu.selectedItem = item;
				}

				this.subMenu.selectedIndex = -1;
			}
			else if (this.subMenu.selectedItem && this.subMenu.selectedItem.parent == item.parent)
			{
				this.subMenu.selectedItem = item;
			}
			else
			{
				var items:Array = TopMenuUtils.getChildren(item.parent, this.model);
				this.setRootMenuItems(items);
				this.rootMenu.selectedItem = item.parent == "menu" ? item : this.model[item.id];
				
				items = TopMenuUtils.getChildren(item.id, this.model);
				this.setSubMenuItems(items);
			}	

			this.nextDisabled = !this.canGoForward();
			this.previousDisabled = !this.canGoBackward();
		}

		public function initializeMenuModel(data:Object, itemsOrder:Array):void
		{
			if (!data && this.model.data) 
			{
				data = this.model.data;
			}
			else if (data)
			{
				this.model.data = data;
			}
			else
			{
				return;
			}
			
			if (itemsOrder)
			{
				this.model.itemsOrder = itemsOrder;
			}
			
			for (var key:String in data)
			{
				this.model[key] = TopMenuUtils.transformObjectToMenuVOItems(data[key], data);
			}
	
			if (!this.model.hasOwnProperty("menu")) return;
			
			TopMenuUtils.recalculateMarkedMenu(_showMarks, model, model["menu"]);
			TopMenuUtils.recalculateFolderStyleMenu(_folderMenuStyle, model, model["menu"]);
			
			var items:Array = TopMenuUtils.getSiblings("menu", this.model);
			this.setRootMenuItems(items);
			
			this.refreshMenu(ChangeSourceConst.SUB_MENU);
			this.refreshMenuTitle();

			this.nextDisabled = !this.canGoForward();
			this.previousDisabled = !this.canGoBackward();
			
			if (!this.hasEventListener(KeyboardEvent.KEY_DOWN))
			{
				this.addEventListener(KeyboardEvent.KEY_DOWN, onArrowKeyDown);
			}
			
			this.dispatchEvent(new TopMenuEvent(TopMenuEvent.MENU_LOADED, this.rootMenu.selectedItem));
		}

		private function onTopMenuInitComplete(event:Event):void
		{
			var service:HTTPService = new HTTPService();
			service.addBead(new CORSCredentialsBead(true));
			service.url = "resources/menu.json";
			service.method = "GET";
			service.addEventListener(HTTPConstants.COMPLETE, onMenuLoaded);
			service.addEventListener(HTTPConstants.IO_ERROR, onMenuError);
            service.send();
		}
		
		private function onMenuLoaded(event:Event):void
		{
			var service:HTTPService = event.target as HTTPService;
			
			service.removeEventListener(HTTPConstants.COMPLETE, onMenuLoaded);
			service.removeEventListener(HTTPConstants.IO_ERROR, onMenuError);
			
			if (service.status == 200)
			{
				var data:Object = JSON.parse(event.target["data"]);
	
				this.initializeMenuModel(data, data.itemsOrder);
			}
		}
		
		private function onMenuError(event:FaultEvent):void
		{
			
		}

		private function onRootMenuChange(event:Event):void
		{
			this.refreshMenu(ChangeSourceConst.ROOT_MENU);
			
			this.refreshMenuIcons();
		
			this.nextDisabled = !this.canGoForward();
			this.previousDisabled = !this.canGoBackward();
			
			this.dispatchEvent(new TopMenuEvent(TopMenuEvent.MENU_ITEM_CHANGE, this.selectedItem, this.subMenu.selectedItem));
			
			this.refreshMenuTitle();
		}
		
		private function onSubMenuChange(event:Event):void
		{
			this.refreshMenu(ChangeSourceConst.SUB_MENU);
			
			this.nextDisabled = !this.canGoForward();
			this.previousDisabled = !this.canGoBackward();
			
			this.refreshMenuIcons();
			
			this.dispatchEvent(new TopMenuEvent(TopMenuEvent.MENU_ITEM_CHANGE, this.selectedItem, this.subMenu.selectedItem));
			
			this.refreshMenuTitle();
		}

		private function onTravel(direction:String):void
		{
			var mainSelectedItem:TopMenuVO = this.subMenu.selectedItem ? this.subMenu.selectedItem as TopMenuVO : 
																	    this.rootMenu.selectedItem as TopMenuVO;
			
			var nextId:String = direction == "forward" ? itemForward(mainSelectedItem.id) : itemBackward(mainSelectedItem.id);
			
			mainSelectedItem = this.model[nextId];
			var parentSelectedItem:TopMenuVO = this.model[mainSelectedItem.parent];
			if (!parentSelectedItem) return;
			
			var rootSelectedItem:TopMenuVO = null;
			var subSelectedItem:TopMenuVO = null;
			if (parentSelectedItem.id == "menu")
			{
				rootSelectedItem = mainSelectedItem;
			}
			else
			{	
				if (mainSelectedItem.hasChildren())
				{
					rootSelectedItem = mainSelectedItem;
				}	
				else
				{
					rootSelectedItem = parentSelectedItem;
					subSelectedItem = mainSelectedItem;
				}
			}
			
			var siblingsRoot:Array = TopMenuUtils.getSiblings(rootSelectedItem.id, this.model);
			var dataProvider:Array = this.rootMenu.dataProvider.source;
			if (isArraySame(dataProvider, siblingsRoot) == false)
			{
				this.setRootMenuItems(siblingsRoot);
			}
			
			dataProvider = this.subMenu.dataProvider.source;
			if (subSelectedItem)
			{
				var siblingsSub:Array = TopMenuUtils.getSiblings(subSelectedItem.id, this.model);
				if (isArraySame(dataProvider, siblingsSub) == false)
				{
					this.setSubMenuItems(siblingsSub);
				}
			}
			else
			{
				var childrenRoot:Array = TopMenuUtils.getChildren(rootSelectedItem.id, this.model);
				if (isArraySame(dataProvider, childrenRoot) == false)
				{
					this.setSubMenuItems(childrenRoot);
				}
			}
			
			this.rootMenu.selectedItem = rootSelectedItem;
			this.subMenu.selectedItem = subSelectedItem;

			this.nextDisabled = !this.canGoForward();
			this.previousDisabled = !this.canGoBackward();
			
			if (_showMarks)
			{
				TopMenuUtils.recalculateVisited(this.selectedItem as TopMenuVO, this.model);
			}
			
			this.dispatchEvent(new TopMenuEvent(TopMenuEvent.MENU_ITEM_CHANGE, this.rootMenu.selectedItem, this.subMenu.selectedItem));

			this.refreshMenuTitle();
		}

		private function onCloseMenu(event:MouseEvent):void
		{
			if (this.menuDrawer.isOpen)
			{
				this.menuDrawer.close();
			}
			else
			{
				this.menuDrawer.open();
			}
			this.menuOpen.visible = !this.menuDrawer.isOpen;
		}
		 
		private function onArrowKeyDown(event:KeyboardEvent):void
		{
			if (event.currentTarget != this) return;
			
			switch (event.code) 
			{
				case "ArrowRight":
					this.onTravel("forward");
				break;
				case "ArrowLeft":
					this.onTravel("backward");
				break;
			}
		}
		
		private function itemForward(itemId:String):String
		{
			var index:int = this.model.itemsOrder.findIndex(function(id:String):Boolean {
				return itemId == id;
			});
			
			var nextId:String = this.model.itemsOrder[index + 1];
			
			return nextId;
		}
		
		private function itemBackward(itemId:String):String
		{
			var index:int = this.model.itemsOrder.findIndex(function(id:String):Boolean {
				return itemId == id;
			});
			
			var previousId:String = this.model.itemsOrder[index - 1];
			
			return previousId;
		}
		
		private function canGoForward():Boolean
		{
			var mainSelectedItem:TopMenuVO = this.subMenu.selectedItem ? this.subMenu.selectedItem as TopMenuVO : 
																	    this.rootMenu.selectedItem as TopMenuVO;
			var itemsOrder:Array = this.model.itemsOrder;
			
			if (!mainSelectedItem && itemsOrder.length == 0)
			{
				return false;	
			}
			
			return mainSelectedItem.id != itemsOrder[itemsOrder.length - 1];
		}
		
		private function canGoBackward():Boolean
		{
			var mainSelectedItem:TopMenuVO = this.subMenu.selectedItem ? this.subMenu.selectedItem as TopMenuVO : 
																	    this.rootMenu.selectedItem as TopMenuVO;
			var itemsOrder:Array = this.model.itemsOrder;
			
			if (!mainSelectedItem && itemsOrder.length == 0)
			{
				return false;	
			}
			
			return mainSelectedItem.id != itemsOrder[1];
		}
		
		private function isArraySame(array1:Array, array2:Array):Boolean
		{
			if (array1.length == 0 && array2.length == 0) return true;
			
			if (array1.length == 0 || array2.length == 0) return false;
			
			return array1[0].id == array2[0].id;
		}
		
		private function refreshMenu(changeSource:String):Object
		{
			var currentSelectedItem:TopMenuVO = this.subMenu.selectedItem as TopMenuVO;
	
			if (currentSelectedItem && currentSelectedItem.hasChildren())
			{
				this.setRootMenuItems(TopMenuUtils.getChildren(currentSelectedItem.parent, this.model));
				this.rootMenu.selectedItem = currentSelectedItem;
				
				this.setSubMenuItems(TopMenuUtils.getChildren(currentSelectedItem.id, this.model));
			}
			else
			{
				currentSelectedItem = this.rootMenu.selectedItem as TopMenuVO;
				
				if (currentSelectedItem && !currentSelectedItem.hasChildren())
				{
					var siblings:Array = TopMenuUtils.getSiblings(currentSelectedItem.id, this.model);
					this.setRootMenuItems(siblings);
		
					var children:Array = TopMenuUtils.getChildren(currentSelectedItem.id, this.model);
					this.setSubMenuItems(children);	
					
					if (changeSource == ChangeSourceConst.ROOT_MENU)
					{
						if (currentSelectedItem.parent)
						{
							siblings = TopMenuUtils.getSiblings(currentSelectedItem.parent, this.model);
							this.setRootMenuItems(siblings);
							
							children = [];
							if (currentSelectedItem.hasChildren())
							{
								children = TopMenuUtils.getChildren(currentSelectedItem.id, this.model);
								this.setSubMenuItems(children);	
								
								this.rootMenu.selectedItem = this.model[currentSelectedItem.parent];
							}
							else if (currentSelectedItem.parent != "menu")
							{
								children = TopMenuUtils.getChildren(currentSelectedItem.parent, this.model);
								this.setSubMenuItems(children);
								
								this.rootMenu.selectedItem = this.model[currentSelectedItem.parent];
								this.subMenu.selectedItem = currentSelectedItem;
							}
							else
							{
								this.rootMenu.selectedItem = currentSelectedItem;
							}
						}
					}
					else
					{
						this.setRootMenuItems(siblings);
						this.setSubMenuItems(children);	
						if (children && children.length > 0)
						{
							this.subMenu.selectedItem = currentSelectedItem;
						}
						else
						{
							this.rootMenu.selectedItem = currentSelectedItem;
						}
					}
				}	
				else
				{
					var targetId:String = currentSelectedItem ? currentSelectedItem.id : null;
					var subMenuChildren:Array = TopMenuUtils.getChildren(targetId, this.model);
					this.setSubMenuItems(subMenuChildren);
				}
			}

			return currentSelectedItem;
		}
		
		private function refreshMenuTitle():void
		{
			this.menuTitle.text = "Menu";
			if (this.subMenu.selectedItem)
			{
				this.menuTitle.text = "Selection: " + this.subMenu.selectedItem.label;
			}	
			else if (this.rootMenu.selectedItem)
			{
				this.menuTitle.text = "Selection: " + this.rootMenu.selectedItem.label;
			}
		}
		
		private function refreshMenuIcons():void
		{
			if (_showMarks && !_folderMenuStyle)
			{
				TopMenuUtils.recalculateVisited(this.selectedItem as TopMenuVO, this.model);
			}
		}
		
		private function setRootMenuItems(menu:Array):void
		{
			if (!this.rootMenu) return;

			var dp:ArrayList = new ArrayList(menu);
			this.rootMenu.dataProvider = dp;
			this.rootMenu.selectedIndex = 0;
		}
		
		private function setSubMenuItems(menu:Array):void
		{
			if (!this.subMenu) return;

			this.subMenu.dataProvider = new ArrayList(menu);
			this.subMenu.visible = menu.length > 0;
		}
	]]>
</fx:Script>
	<j:Group percentHeight="100">
		<j:Drawer localId="menuDrawer" isOpen="true">
			<j:style>
				<js:AllCSSStyles width="max-content"/>
			</j:style>
			<j:beads>
				<j:ResponsiveDrawer localId="drawerResponsive" auto="true"/>
				<helpers:HideMenuOnMouseDownIfFixed/>
				<helpers:CloseMenuOnNavigationLinkClick />
			</j:beads>
			<j:DrawerHeader height="50">
				<j:style>
					<js:SimpleCSSStyles padding="0"/>
				</j:style>
				
				<j:HGroup percentHeight="100" gap="1" itemsVerticalAlign="itemsCenter" itemsHorizontalAlign="itemsLeft">
					<j:style>
						<js:SimpleCSSStyles paddingLeft="10"/>
					</j:style>
					<j:HGroup itemsHorizontalAlign="itemsRight">
						<j:style>
							<js:SimpleCSSStyles padding="1" paddingRight="3"/>
						</j:style>
						<j:IconButton click="onCloseMenu(event)" className="topMenuCloseButton">
							<j:icon>
								<js:MaterialIcon className="mdi mdi-chevron-double-left"/>
							</j:icon>
						</j:IconButton>
					</j:HGroup>
					<j:IconButton localId="arrowLeft" width="24" click="onTravel('backward')">
						<j:beads>
							<j:Disabled disabled="{previousDisabled}"/>
						</j:beads>
						<j:icon>
							<js:MaterialIcon text="{MaterialIconType.CHEVRON_LEFT}" />
						</j:icon>
					</j:IconButton>
					<j:IconButton localId="arrowRight" width="24" click="onTravel('forward')">
						<j:beads>
							<j:Disabled disabled="{nextDisabled}"/>
						</j:beads>
						<j:icon>
							<js:MaterialIcon text="{MaterialIconType.CHEVRON_RIGHT}" />
						</j:icon>
					</j:IconButton>
					<html:P localId="menuTitle" text="Menu"/>
				</j:HGroup>
			</j:DrawerHeader>
			<j:HGroup>	
				<j:beads>
					<j:ScrollingViewport />
				</j:beads>
				<j:Navigation localId="rootMenu" labelField="label" className="topMenuList"
							  itemRenderer="classes.topMenu.components.renderers.MenuItemRenderer"
								selectedIndex="0" change="onRootMenuChange(event)">
					<j:beads>
						<j:NavigationActionNotifier/>
						<j:NoViewport />
					</j:beads>
				</j:Navigation>
				<j:Navigation localId="subMenu" labelField="label" className="topMenuList" change="onSubMenuChange(event)"
							  itemRenderer="classes.topMenu.components.renderers.MenuItemRenderer">
					<j:beads>
						<j:NavigationActionNotifier/>
						<j:NoViewport />
					</j:beads>
				</j:Navigation>
			</j:HGroup>
		</j:Drawer>
	</j:Group>
	<j:Group localId="menuOpen" visible="false" height="50">
	     <j:IconButton click="onCloseMenu(event)" className="topMenuCloseButton" percentHeight="100">
			<j:icon>
				<js:MaterialIcon className="mdi mdi-chevron-double-right"/>
			</j:icon>
		</j:IconButton>
	</j:Group>
</j:HGroup>